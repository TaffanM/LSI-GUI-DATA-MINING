# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'menu.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from collections import Counter
import os
import string
import nltk
import PyPDF2
from docx import Document
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MenuWindow(object):
    
    def setupUi(self, MenuWindow):
        MenuWindow.setObjectName("MenuWindow")
        MenuWindow.resize(1353, 753)
        self.centralwidget = QtWidgets.QWidget(MenuWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(-4, 0, 261, 761))
        self.widget.setStyleSheet("background-color:  #2b9fa4;\n"
"color: #FFFFFF;\n"
"\n"
"\n"
"\n"
"")
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("margin-top: 20px;\n"
"font-size: 16px;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"    margin-top: 20px;\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(20, 508, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget)
        self.pushButton_5.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"    margin-bottom: 20px;\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(250, 0, 1111, 761))
        self.stackedWidget.setStyleSheet("background-color: rgb(76, 181, 185);")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label_2 = QtWidgets.QLabel(self.page)
        self.label_2.setGeometry(QtCore.QRect(30, 30, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: #FFFFFF")
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_3 = QtWidgets.QLabel(self.page_2)
        self.label_3.setGeometry(QtCore.QRect(30, 30, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: #FFFFFF")
        self.label_3.setObjectName("label_3")
        self.pushButton_6 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 100, 161, 41))
        self.pushButton_6.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.listView_2 = QtWidgets.QListView(self.page_2)
        self.listView_2.setGeometry(QtCore.QRect(30, 150, 256, 192))
        self.listView_2.setObjectName("listView_2")
        self.pushButton_7 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_7.setGeometry(QtCore.QRect(380, 100, 161, 41))
        self.pushButton_7.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.listView_3 = QtWidgets.QListView(self.page_2)
        self.listView_3.setGeometry(QtCore.QRect(390, 150, 671, 571))
        self.listView_3.setObjectName("listView_3")
        self.line = QtWidgets.QFrame(self.page_2)
        self.line.setGeometry(QtCore.QRect(323, 100, 20, 621))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.stackedWidget.addWidget(self.page_2)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.label_4 = QtWidgets.QLabel(self.page_5)
        self.label_4.setGeometry(QtCore.QRect(30, 30, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: #FFFFFF")
        self.label_4.setObjectName("label_4")
        self.pushButton_8 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_8.setGeometry(QtCore.QRect(20, 110, 161, 41))
        self.pushButton_8.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.listView_4 = QtWidgets.QListView(self.page_5)
        self.listView_4.setGeometry(QtCore.QRect(30, 160, 1021, 571))
        self.listView_4.setObjectName("listView_4")
        self.stackedWidget.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.label_5 = QtWidgets.QLabel(self.page_6)
        self.label_5.setGeometry(QtCore.QRect(30, 30, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: #FFFFFF")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.page_6)
        self.label_6.setGeometry(QtCore.QRect(20, 250, 421, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: #FFFFFF")
        self.label_6.setObjectName("label_6")
        self.listView = QtWidgets.QListView(self.page_6)
        self.listView.setGeometry(QtCore.QRect(20, 310, 611, 251))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(14)
        self.listView.setFont(font)
        self.listView.setObjectName("listView")
        self.pushButton_9 = QtWidgets.QPushButton(self.page_6)
        self.pushButton_9.setGeometry(QtCore.QRect(680, 170, 171, 41))
        self.pushButton_9.setStyleSheet("QPushButton {\n"
"    font-size: 18px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    margin: 0px 10px;\n"
"}")
        self.pushButton_9.setObjectName("pushButton_9")
        self.stackedWidget.addWidget(self.page_6)
        self.label_file = QtWidgets.QLabel(self.page_2)
        self.label_file.setGeometry(QtCore.QRect(30, 360, 130, 16))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(12)
        self.label_file.setFont(font)
        self.label_file.setStyleSheet("color: #000000")
        self.label_file.setObjectName("label_file")

        self.lineEdit = QtWidgets.QLineEdit(self.page_6)
        self.lineEdit.setGeometry(QtCore.QRect(20, 170, 611, 41))
        self.lineEdit.setInputMask("")
        self.lineEdit.setObjectName("lineEdit")
        MenuWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MenuWindow)

        self.pushButton_5.clicked.connect(self.exit_window)

        # Button ganti page
        self.pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.pushButton_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.pushButton_3.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.pushButton_4.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        
        #Button browse file
        self.model = QtGui.QStandardItemModel()
        self.listView_2.setModel(self.model)
        self.listView_2.setObjectName("listView_2")
        self.pushButton_6.clicked.connect(self.browse_file)

        #Button preprocess 
        self.model1 = QtGui.QStandardItemModel()
        self.listView_3.setModel(self.model1)
        self.listView_3.setObjectName("listView_3")
        self.pushButton_7.clicked.connect(self.preprocess_files)

        # Button Stemming
        self.model2 = QtGui.QStandardItemModel()
        self.listView_4.setModel(self.model2)
        self.listView_4.setObjectName("listView_4")
        self.pushButton_8.clicked.connect(self.stemming_text)

        # Button Temu Balik
        query = self.lineEdit.text()
        self.model3 = QtGui.QStandardItemModel()
        self.listView.setModel(self.model3)
        self.listView.setObjectName("listView")
        self.pushButton_9.clicked.connect(self.lsi_calculation)
        self.preprocessed_texts = []
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MenuWindow)

    def retranslateUi(self, MenuWindow):
        _translate = QtCore.QCoreApplication.translate
        MenuWindow.setWindowTitle(_translate("MenuWindow", "MenuWindow"))
        self.label.setText(_translate("MenuWindow", "LSI (Latest Semantic Index)"))
        self.pushButton.setText(_translate("MenuWindow", "Home"))
        self.pushButton_2.setText(_translate("MenuWindow", "Preprocessing"))
        self.pushButton_3.setText(_translate("MenuWindow", "Stemming"))
        self.pushButton_4.setText(_translate("MenuWindow", "Temu Balik"))
        self.pushButton_5.setText(_translate("MenuWindow", "Exit"))
        self.label_2.setText(_translate("MenuWindow", "Home"))
        self.label_3.setText(_translate("MenuWindow", "Preprocessing"))
        self.label_file.setText(_translate("MenuWindow", ""))
        self.pushButton_6.setText(_translate("MenuWindow", "Browse File"))
        self.pushButton_7.setText(_translate("MenuWindow", "Preprocess"))
        self.label_4.setText(_translate("MenuWindow", "Stemming"))
        self.pushButton_8.setText(_translate("MenuWindow", "Stemming"))
        self.label_5.setText(_translate("MenuWindow", "Temu Balik"))
        self.label_6.setText(_translate("MenuWindow", "Result (Cosine Similarity)"))
        self.pushButton_9.setText(_translate("MenuWindow", "Temu Balik"))

    def exit_window(self):
        sys.exit(app.exec_())

    def browse_file(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select File", "", "All Files (*);;Text Files (*.txt);;Word Files (*.docx);;PDF Files (*.pdf)", options=options)

        if file_name:
                file_path = os.path.abspath(file_name)
                file_base_name = os.path.basename(file_name)
                item = QtGui.QStandardItem(file_base_name)
                item.setData(file_path, QtCore.Qt.UserRole)  # Set file_path as UserRole
                self.model.appendRow(item)
                # Store the selected index
                self.selected_index = self.model.indexFromItem(item).row()
                self.label_file.setText("")
        else:
                self.label_file.setText("No file selected")

    def preprocess_text(self, text):
        text = text.lower()
        text = text.translate(str.maketrans("", "", string.punctuation))
        words = nltk.word_tokenize(text)
        words = [word for word in words if word.isalpha() and word not in nltk.corpus.stopwords.words('indonesian')]
        return ' '.join(words)
    
    def preprocess_files(self):
        # Clear existing items in the model
        self.model1.clear()

        total_word_counter = Counter()  # Create a Counter to store word counts for all files

        for index in range(self.model.rowCount()):
                file_name = self.model.item(index).text()
                file_path = self.model.index(index, 0).data(QtCore.Qt.UserRole)

                # Read the document content
                document_text = self.read_document(file_path)

                # Check if the document is not empty
                if document_text.strip():
                        # Preprocess the text
                        preprocessed_text = self.preprocess_text(document_text)

                        # Append preprocessed text to the list
                        self.preprocessed_texts.append(preprocessed_text)

                        # Count the number of words in the preprocessed text
                        word_counts = Counter(preprocessed_text.split())

                        # Update the total word counter
                        total_word_counter += word_counts

                        # Display the preprocessed text for the current file
                        file_item = QtGui.QStandardItem(f"{file_name} (Preprocessed): {preprocessed_text}")
                        file_item.setToolTip(preprocessed_text)

                        # Set file_path as UserRole
                        file_item.setData(file_path, QtCore.Qt.UserRole)
                        
                        self.model1.appendRow(file_item)

                        # Display the word count for the current file
                        word_count_item = QtGui.QStandardItem("Word Count:")
                        self.model1.appendRow(word_count_item)

                        for word, count in word_counts.items():
                                word_item = QtGui.QStandardItem(f"  {word} <> {count}")
                                self.model1.appendRow(word_item)

        # Display the total word count across all files
        total_item = QtGui.QStandardItem("Total Word Count:")
        self.model1.appendRow(total_item)

        for word, count in total_word_counter.items():
                total_word_item = QtGui.QStandardItem(f"  {word} <> {count}")
                self.model1.appendRow(total_word_item)

        # Set the model for the ListView
        self.listView_3.setModel(self.model1)



    def read_text_document(self, filepath):
        with open(filepath, 'r', encoding='utf-8') as f:
                return f.read()

    def read_docx_document(self, filepath):
        doc = Document(filepath)
        text = ' '.join([paragraph.text for paragraph in doc.paragraphs])
        return text

    def read_pdf_document(self, filepath):
        with open(filepath, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text = ''
                for page_num in range(len(pdf_reader.pages)):
                        page = pdf_reader.pages[page_num]
                        text += page.extract_text()
                return text

    def read_document(self, filepath):
        _, ext = os.path.splitext(filepath.lower())
        if ext == '.txt':
                return self.read_text_document(filepath)
        elif ext == '.docx':
                return self.read_docx_document(filepath)
        elif ext == '.pdf':
                return self.read_pdf_document(filepath)
        else:
                raise ValueError(f"Unsupported file format: {ext}")

    def stemming_text(self):
        self.model2.clear()

        stemmer = StemmerFactory().create_stemmer()

        for index in range(self.model1.rowCount()):
            file_name = self.model1.item(index).text()
            preprocessed_text = self.model1.item(index).toolTip()  

            # Perform stemming on the preprocessed text
            stemmed_text = stemmer.stem(preprocessed_text)

            # Display the stemmed text for the current file
            item = QtGui.QStandardItem(f"{file_name} (Stemmed): {stemmed_text}")
            item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable)
            item.setTextAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft)  # Align text to the top-left
            item.setToolTip(stemmed_text) 
            self.model2.appendRow(item)

        # Set the model for the ListView
        self.listView_4.setModel(self.model2)

    def lsi_calculation(self):
        # Get the selected file path from the stored index
        if self.selected_index is None:
                print("No document selected.")
                return

        file_path = self.model.index(self.selected_index, 0).data(QtCore.Qt.UserRole)
        # Get the query from the lineEdit widget
        query = self.lineEdit.text()
        self.calculate_similarity(file_path, query)

    def stemmer(self, text):
        factory = StemmerFactory()
        stemmer = factory.create_stemmer()
        return stemmer.stem(text)

    def calculate_similarity(self, file_path, query):
        # Get all document paths in the directory
        dir_path = os.path.dirname(file_path)
        document_paths = [os.path.join(dir_path, filename) for filename in os.listdir(dir_path)]

        # Get preprocessed texts from all documents
        preprocessed_texts = [self.stemmer(self.preprocess_text(self.read_document(doc_path))) for doc_path in document_paths]

        # Add the query to the preprocessed texts
        preprocessed_query = self.stemmer(self.preprocess_text(query))
        preprocessed_texts.append(preprocessed_query)

        # Check if there is at least one non-empty document
        if not any(preprocessed_texts):
                print("No non-empty documents to process.")
                return

        # Create a CountVectorizer
        vectorizer = CountVectorizer()

        # Fit and transform the preprocessed texts
        bow_matrix = vectorizer.fit_transform(preprocessed_texts)

        # Apply TruncatedSVD (LSI)
        num_topics = 2
        lsi = TruncatedSVD(n_components=num_topics)
        lsi_matrix = lsi.fit_transform(bow_matrix)

        # Calculate cosine similarity with the query document
        query_similarity_scores = cosine_similarity(lsi_matrix[-1].reshape(1, -1), lsi_matrix[:-1])

        # Display the results
        self.model3.clear()

        # Sort documents by similarity score (descending order)
        ranked_documents = np.argsort(query_similarity_scores[0])[::-1]

        # Display the results
        for rank, index in enumerate(ranked_documents):
                if index < self.model.rowCount():
                        file_name = self.model.item(index).text()
                        score = query_similarity_scores[0, index]
                        item = QtGui.QStandardItem(f"Rank: {rank + 1}, Dokumen: {file_name}, Cosine Similarity: {score:.4f}")
                        self.model3.appendRow(item)

        self.listView.setModel(self.model3)



               


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1353, 753)
        MainWindow.setStyleSheet("background-color: rgb(2, 159, 164);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-340, 50, 581, 481))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("asset/blob.png"))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1130, 260, 581, 481))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("asset/blob.png"))
        self.label_2.setObjectName("label_2")
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(580, 420, 200, 80))
        self.startButton.setMinimumSize(QtCore.QSize(200, 80))
        self.startButton.setStyleSheet("QPushButton {\n"
"    background-color: #1E7878;\n"
"    border: none;\n"
"    color: rgb(39, 158, 158) ;    \n"
"    border-top: 2px solid rgb(23, 95, 95);\n"
"    border-left: 2px solid rgb(23, 95, 95);\n"
"    border-right: 2px solid rgb(23, 95, 95);\n"
"    border-bottom: 2px solid rgb(23, 95, 95);\n"
"    border-radius: 25px;\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    font-size: 32px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(42, 167, 167);\n"
"    border: none;\n"
"    color:  rgb(26, 108, 108);\n"
"    border-top: 2px solid rgb(41, 173, 173);\n"
"    border-left: 2px solid rgb(41, 173, 173);\n"
"    border-right: 2px solid rgb(41, 173, 173);\n"
"    border-bottom: 2px solid rgb(41, 173, 173);\n"
"\n"
"    font-family: \"Poppins\";\n"
"    font-weight: bold;\n"
"    font-size: 32px;\n"
"    transition-delay: 1s\n"
"    \n"
"}")
        self.startButton.setObjectName("startButton")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(220, 140, 911, 231))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("asset/title.png"))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(210, 420, 271, 271))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("asset/friedrice2.png"))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(840, 410, 281, 281))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("asset/spaghetti.png"))
        self.label_5.setObjectName("label_5")
        self.label_2.raise_()
        self.startButton.raise_()
        self.label_3.raise_()
        self.label.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        #Button
        self.startButton.clicked.connect(self.next_window)

        self.startButton.clicked.connect(self.next_window)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "START"))

    def next_window(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MenuWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        MainWindow.hide()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui_main = Ui_MainWindow()
    ui_main.setupUi(MainWindow)

    MenuWindow = QtWidgets.QMainWindow()
    ui_menu = Ui_MenuWindow()
    ui_menu.setupUi(MenuWindow)

    MainWindow.show()
    sys.exit(app.exec_())
